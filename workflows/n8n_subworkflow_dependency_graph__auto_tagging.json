{"createdAt":"2025-02-18T23:17:18.643Z","updatedAt":"2025-02-18T23:19:38.754Z","id":"BqWhdZtee9qNmVXE","name":"[TEMPLATE] n8n Subworkflow Dependency Graph & Auto-Tagging","active":false,"nodes":[{"parameters":{"method":"PUT","url":"={{ $('SET instance_url').item.json.instance_url }}/api/v1/workflows/{{ $json.id }}/tags","authentication":"predefinedCredentialType","nodeCredentialType":"n8nApi","sendBody":true,"specifyBody":"json","jsonBody":"={{ $json.tags }}","options":{}},"id":"0d443c93-8e90-4e02-b53a-4869dc6e4bec","name":"Update workflow tags","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[3200,740],"credentials":{"n8nApi":{"id":"ppIug6sKU2ewT15Z","name":"n8n account"}}},{"parameters":{"filters":{},"requestOptions":{}},"id":"fa0b4261-3cb8-49e6-bf91-3d92f088d1a6","name":"GET all workflows","type":"n8n-nodes-base.n8n","typeVersion":1,"position":[1000,0],"credentials":{"n8nApi":{"id":"ppIug6sKU2ewT15Z","name":"n8n account"}}},{"parameters":{"jsCode":"const workflows = $input.all();\nconst dependencyGraph = {};\n\n// Helper function to initialize a workflow entry\nconst getOrCreateWorkflowEntry = (id, name, tags) => {\n  if (!dependencyGraph[id]) {\n    dependencyGraph[id] = { id, name, callers: [], tags };\n  }\n  return dependencyGraph[id];\n};\n\n// Build lookup tables for workflow names and tags\nconst workflowNameMap = {};\nconst workflowTagsMap = {};\n\nworkflows.forEach(item => {\n  workflowNameMap[item.json.id] = item.json.name;\n  workflowTagsMap[item.json.id] = item.json.tags || [];\n});\n\n// Process each workflow\nworkflows.forEach(item => {\n  const { id: workflowId, name: workflowName, nodes = [], tags = [] } = item.json;\n  \n  // Ensure the workflow itself exists in the output, with its own tags\n  getOrCreateWorkflowEntry(workflowId, workflowName, tags);\n\n  // Process nodes that execute workflows\n  nodes.forEach(({ type, parameters }) => {\n    if (\n      type !== 'n8n-nodes-base.executeWorkflow' &&\n      type !== '@n8n/n8n-nodes-langchain.toolWorkflow'\n    ) return;\n\n    let subWorkflowId = parameters?.workflowId?.value || parameters?.workflowId;\n    if (subWorkflowId === \"={{ $workflow.id }}\") subWorkflowId = workflowId; // Handle self-referencing\n\n    if (subWorkflowId) {\n      const subWorkflowName = workflowNameMap[subWorkflowId] || \"Unknown Workflow\"; // Lookup name\n      const subWorkflowTags = workflowTagsMap[subWorkflowId] || []; // Lookup correct tags\n\n      const entry = getOrCreateWorkflowEntry(subWorkflowId, subWorkflowName, subWorkflowTags);\n\n      if (!entry.callers.includes(workflowId)) {\n        entry.callers.push(workflowId);\n      }\n    }\n  });\n});\n\n// Convert to an array format\nreturn Object.values(dependencyGraph);"},"id":"620e7fc1-6413-4310-af57-7c7fa80bbe1b","name":"List callers of subworkflows","type":"n8n-nodes-base.code","typeVersion":2,"position":[1200,0]},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"a1ccd5c3-ee85-412b-ac36-b68f9d2bc904","leftValue":"={{ $json.callers.length }}","rightValue":0,"operator":{"type":"number","operation":"gt"}}],"combinator":"and"},"options":{}},"id":"1e5a4cce-b9b6-4b04-b352-28531e3abe40","name":"Exclude uncalled workflows","type":"n8n-nodes-base.filter","typeVersion":2.2,"position":[1400,0]},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"d12ad828-2f0c-4e2d-a6d5-de28007253cf","leftValue":"={{ $json.hasField(\"error\") }}","rightValue":"","operator":{"type":"boolean","operation":"false","singleValue":true}}],"combinator":"and"},"options":{}},"id":"46f89497-f236-4721-aec3-d6a8dfd632b7","name":"Exclude missing workflows","type":"n8n-nodes-base.filter","typeVersion":2.2,"position":[1800,0]},{"parameters":{"rule":{"interval":[{"field":"weeks"}]}},"id":"8632c303-4dc1-499e-a961-d24decc116a9","name":"And every Sunday","type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[760,160]},{"parameters":{"events":["activate"]},"id":"6fbd9ab4-75b7-4ef7-9ab7-e84514f860e1","name":"When this workflow is activated","type":"n8n-nodes-base.n8nTrigger","typeVersion":1,"position":[760,0]},{"parameters":{"operation":"get","workflowId":{"__rl":true,"value":"={{ $json.id }}","mode":"id"},"requestOptions":{}},"id":"b9e61415-20fe-4da3-a09e-b837fa9737dd","name":"GET workflow(s)","type":"n8n-nodes-base.n8n","typeVersion":1,"position":[1600,0],"onError":"continueRegularOutput"},{"parameters":{"assignments":{"assignments":[{"id":"34f1dd94-28dc-4105-8e81-8fcf2672e631","name":"id","value":"={{ $('Exclude uncalled workflows').item.json.id }}","type":"string"},{"id":"809b0f5d-4a4f-470c-a514-1e2dc7df92c4","name":"name","value":"={{ $('Exclude uncalled workflows').item.json.name }}","type":"string"},{"id":"422ef66d-c26a-454c-85fd-856fca668782","name":"callers","value":"={{ $('Exclude uncalled workflows').item.json.callers }}","type":"array"},{"id":"3353b704-871b-4b22-95c2-2e6fd5bb1df3","name":"callers_count","value":"={{ $('Exclude uncalled workflows').item.json.callers.length }}","type":"number"},{"id":"b23ab78d-2136-4cc3-9b9a-1b5ed89d1e28","name":"new_callers","value":"={{ $('Exclude uncalled workflows').item.json.callers.difference($('Exclude uncalled workflows').item.json.tags.map(item => item.name)) }}","type":"array"}]},"options":{}},"id":"313f901d-6828-4be5-9de7-9ed7278861af","name":"Count callers and identify new callers","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[2000,0]},{"parameters":{"options":{}},"id":"7204f74f-c861-4374-830c-8ae69e1f290e","name":"Loop through workflows","type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[2240,0]},{"parameters":{"url":"={{ $json.instance_url }}/api/v1/tags","authentication":"predefinedCredentialType","nodeCredentialType":"n8nApi","options":{}},"id":"1011853a-7137-476d-9297-36482b86e2f0","name":"GET all tags","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2800,220],"credentials":{"n8nApi":{"id":"ppIug6sKU2ewT15Z","name":"n8n account"}}},{"parameters":{"assignments":{"assignments":[{"id":"0b40958a-6ab4-4e35-9aee-1d1346dfe8a6","name":"id","value":"={{ $('SET instance_url').item.json.id }}","type":"string"},{"id":"95c97ab8-2945-4818-9a10-1ed1b69369bb","name":"name","value":"={{ $('SET instance_url').item.json.name }}","type":"string"},{"id":"2ed9bf03-2b09-43e1-8cb5-5e6e3c9c9e99","name":"callers","value":"={{ $('SET instance_url').item.json.callers }}","type":"array"},{"id":"3477c08a-7c35-4c0e-85bb-67144e12bff0","name":"callers_count","value":"={{ $('SET instance_url').item.json.callers_count }}","type":"number"},{"id":"f816907e-f679-4573-a14b-2dce6ef69eb1","name":"new_callers","value":"={{ $('SET instance_url').item.json.new_callers.difference($json.data.map(item => item.name)) }}","type":"array"}]},"options":{}},"id":"2655af68-46d6-461b-9033-0ab00e1948a1","name":"Remove existing tags from new_callers list","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[3000,220]},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"42126431-2ae2-4265-aa4d-0d3e77a730b3","leftValue":"={{ $json.new_callers }}","rightValue":"","operator":{"type":"array","operation":"notEmpty","singleValue":true}}],"combinator":"and"},"options":{}},"id":"93b6257a-febe-40bf-bae3-8cf33ffc307a","name":"If any new callers","type":"n8n-nodes-base.if","typeVersion":2.2,"position":[2600,560]},{"parameters":{"fieldToSplitOut":"new_callers","options":{"destinationFieldName":"new_tag_name"}},"id":"7c696447-30fb-44cc-ab9d-f6bea5a1a66b","name":"Split out new callers as new tags","type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[2800,440]},{"parameters":{"method":"POST","url":"={{ $('SET instance_url').item.json.instance_url }}/api/v1/tags","authentication":"predefinedCredentialType","nodeCredentialType":"n8nApi","sendBody":true,"bodyParameters":{"parameters":[{"name":"name","value":"={{ $json.new_tag_name }}"}]},"options":{}},"id":"d0d9a4fa-f741-43a9-9bad-5f716c6dd4aa","name":"Create new tags","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[3000,440],"credentials":{"n8nApi":{"id":"ppIug6sKU2ewT15Z","name":"n8n account"}}},{"parameters":{"jsCode":"return $('SET instance_url').all();"},"id":"16f1b238-3b4e-4720-b98e-35a278c3d2ce","name":"Return original pass through values","type":"n8n-nodes-base.code","typeVersion":2,"position":[3200,440]},{"parameters":{"mode":"combine","combineBy":"combineByPosition","options":{"includeUnpaired":true}},"id":"d1154a99-2693-4b75-ad07-da14b7d3f9b5","name":"Merge","type":"n8n-nodes-base.merge","typeVersion":3,"position":[3400,560]},{"parameters":{"url":"={{ $('SET instance_url').item.json.instance_url }}/api/v1/tags","authentication":"predefinedCredentialType","nodeCredentialType":"n8nApi","options":{}},"id":"79a11185-4681-41bb-9c05-79213c8a7360","name":"GET all tags again","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2600,740],"credentials":{"n8nApi":{"id":"ppIug6sKU2ewT15Z","name":"n8n account"}}},{"parameters":{"assignments":{"assignments":[{"id":"b5f7ba8d-1b94-4cae-a0d1-f2f14c7cb5a3","name":"tags","value":"={{ $json.data.reduce((acc, { id, name }) => ({ ...acc, [id]: name }), {}) }}","type":"object"},{"id":"23a993a4-26e1-474a-9f0a-cedc9792a2f2","name":"callers","value":"={{ $('Merge').item.json.callers }}","type":"array"},{"id":"0d451e74-d701-4ddb-b11c-8d5aa3efdde6","name":"id","value":"={{ $('Merge').item.json.id }}","type":"string"}]},"options":{}},"id":"f21eecb4-eb19-42d5-901c-d518a62c9189","name":"Create tag id:name dictionary","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[2800,740]},{"parameters":{"assignments":{"assignments":[{"id":"762920de-98a6-4027-8e39-1244042f52e1","name":"tags","value":"={{ [$json].flatMap(item => item.callers.map(id => ({ id: Object.keys(item.tags).find(key => item.tags[key] === id) }))).filter(item => item.id); }}","type":"array"},{"id":"1ff05b15-343a-49da-a70d-92c3a5d19011","name":"id","value":"={{ $json.id }}","type":"string"},{"id":"f1afee56-a17f-422b-aabe-e59126efbb8e","name":"callers","value":"={{ $json.callers }}","type":"array"},{"id":"39a0887c-8863-4968-9015-3add683eecd7","name":"name","value":"={{ $('Merge').item.json.name }}","type":"string"},{"id":"4ae3b23c-1faf-4426-8e2e-5254a32d458b","name":"callers_count","value":"={{ $('Merge').item.json.callers_count }}","type":"number"}]},"includeOtherFields":true,"include":"selected","options":{}},"id":"73e284dd-96fd-47ad-9ba1-cc6906c72b4f","name":"Retrieve tag ids and names from dictionary","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[3000,740]},{"parameters":{"assignments":{"assignments":[{"id":"eda3be17-95a6-457f-b620-459cf11c9aee","name":"id","value":"={{ $('Retrieve tag ids and names from dictionary').item.json.id }}","type":"string"},{"id":"02b79f2a-b128-4686-8bb2-78ff44c43698","name":"callers","value":"={{ $('Retrieve tag ids and names from dictionary').item.json.callers }}","type":"array"},{"id":"816163c9-7a5c-445d-8b59-592af7c2a4ac","name":"name","value":"={{ $('Retrieve tag ids and names from dictionary').item.json.name }}","type":"string"},{"id":"c860552e-70d0-4d61-9b9d-ccff690b703b","name":"callers_count","value":"={{ $('Retrieve tag ids and names from dictionary').item.json.callers_count }}","type":"number"}]},"options":{}},"id":"291f40be-2af2-4939-b87c-be7f2d4e2ce6","name":"Return dependency graph data","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[3400,740],"executeOnce":true},{"parameters":{"fieldsToAggregate":{"fieldToAggregate":[{"fieldToAggregate":"name"},{"fieldToAggregate":"id"},{"fieldToAggregate":"callers_count"}]},"options":{}},"id":"8eb5c054-5afa-42da-8afb-71405b52c9dc","name":"Combine dependency graph values into labels","type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[2600,-20]},{"parameters":{"chartType":"pie","labelsMode":"array","labelsArray":"={{ $json.name }}","data":"={{ $json.callers_count }}","chartOptions":{"backgroundColor":"#ffffff","format":"png","height":600,"width":600},"datasetOptions":{"borderColor":"#000"}},"id":"10ccc034-fb6b-4e61-8fad-78dc673bc89d","name":"Visualize subworkflow dependency graph","type":"n8n-nodes-base.quickChart","typeVersion":1,"position":[3000,-20]},{"parameters":{"content":"# n8n Subworkflow Dependency Graph & Auto-Tagging","height":1357.9229992534551,"width":2909.758966302104,"color":7},"id":"708e7615-436b-42ba-b3dc-724a30f2d220","name":"Sticky Note","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[660,-397.5668732742495]},{"parameters":{"content":"The script builds a dependency graph of workflows by identifying which workflows call others (via execution nodes) while preserving workflow names, caller relationships, and tags.","height":172.4182620239646,"width":190.3269519041407,"color":6},"id":"01fadbb0-75de-40dc-9c3e-40c7cc7f014a","name":"Sticky Note1","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[1160,160]},{"parameters":{"content":"Here we filter out any workflows that are not [sub-workflows](https://docs.n8n.io/flow-logic/subworkflows/) (i.e. executed by other workflows).","height":135.16347595207057,"width":150,"color":6},"id":"14e62763-0d45-4e32-9399-76e0aee8982d","name":"Sticky Note2","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[1380,160]},{"parameters":{"content":"We verify that the sub-workflows we intend to tag exist in our instance (not old workflow ids left over after importing a workflow from another instance)","height":100.16655570271519,"width":345.30539364962834,"color":6},"id":"f2de55ec-b14b-425a-a5e9-e83a6f131500","name":"Sticky Note3","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[1580,160]},{"parameters":{"content":"If a tag is freshly created during an earlier iteration through the list of workflows, then it is removed from the list of new callers (i.e. new tags to create).","height":97.51953145794394,"width":320.4824213076102,"color":6},"id":"de5957d7-8eb7-43ac-961e-e495a7eee9f1","name":"Sticky Note4","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[3160,220]},{"parameters":{"content":"### Change instance URL","height":206.54161516323953,"width":188.64373499228745,"color":3},"id":"10654ef9-af03-48bd-9353-2ab3893a77ee","name":"Sticky Note7","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[2560,180]},{"parameters":{"content":"## Generate chart","height":243.8281544043028,"width":502.4185703091201,"color":6},"id":"d12e12dd-198c-4615-af64-bf434ca8de56","name":"Sticky Note5","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[2940,-80]},{"parameters":{"content":"### Pie Chart\nBasic visualization of which sub-workflows are called most often by other workflows","height":135.95151736720237,"width":180.46986136506064,"color":7},"id":"112dd091-9f85-4ab5-8c40-7a048a7499bc","name":"Sticky Note6","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[3220,-20]},{"parameters":{"content":"## Setup instructions:\n1. [Set n8n API credentials](https://docs.n8n.io/api/authentication/)\n2. Replace instance_url in workflow (highlighted in red)\n\n## Frequently used terms\n1. **Callers**: Workflows that execute or trigger another workflow (a subworkflow) within n8n. They often use the Execute Workflow node to pass data and control execution flow.\n2. **Sub-workflow**: A sub-workflow is any workflow that is executed by another workflow. These are often used for reusable automation logic, breaking down complex workflows into modular components.\n3. **Dependency Graph**: A dependency graph visually represents the relationships between workflows in an n8n instance. It maps out which workflows call others, helping users understand execution dependencies, optimize workflow organization, and prevent unintended changes that may break subworkflows.","height":447.49544828389617,"width":434.64763783570623,"color":5},"id":"182324e1-ec17-496a-93e2-ef888b558df3","name":"Sticky Note8","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[680,500]},{"parameters":{"assignments":{"assignments":[{"id":"3bfad885-f167-47fa-a615-da3661c60d85","name":"instance_url","value":"https://www.example.com","type":"string"}]},"includeOtherFields":true,"options":{}},"id":"241edff3-6e40-4ab6-a48e-b4242efcd1c5","name":"SET instance_url","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[2600,220]},{"parameters":{"content":"## Generate dependency graph","height":243.8281544043028,"width":502.4185703091201,"color":6},"id":"9f09523e-954f-47eb-8e09-da40d2b73ee1","name":"Sticky Note9","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[2940,-360]},{"parameters":{"content":"### Dependency Graph\nA visual representation of the relationships between the workflows in your n8n instance","height":135.95151736720237,"width":180.46986136506064,"color":7},"id":"f0c23589-db55-4e35-bcad-73614cfb08d5","name":"Sticky Note10","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[3220,-300]},{"parameters":{"jsCode":"// Assuming the incoming JSON data looks like this:\nconst workflows = $input.all(); // The input data passed to the Code Node\n\n// Function to build the Mermaid chart\nconst buildMermaidChart = (workflows) => {\n    let mermaidChart = 'graph TD\\n'; // Mermaid format for directed graph\n\n    // Iterate over workflows to build relationships\n    workflows.forEach(workflow => {\n        // Accessing the workflow JSON data\n        const workflowData = workflow.json;\n\n        // If the workflow has callers (i.e., workflows that call this one)\n        if (workflowData.callers && workflowData.callers.length > 0) {\n            workflowData.callers.forEach(callerId => {\n                // Add a directed edge in Mermaid format (caller --> current workflow)\n                mermaidChart += `  ${callerId} --> ${workflowData.id}\\n`;\n            });\n        }\n    });\n\n    return mermaidChart;\n};\n\n// Generate the Mermaid chart\nconst mermaidChart = buildMermaidChart(workflows);\n\n// Set the mermaid chart into the output JSON for the next node\nreturn [\n    {\n        json: {\n            mermaidChart: mermaidChart,\n        },\n    },\n];\n"},"id":"4071a95e-2e36-4514-b0e0-b09934e8a6bd","name":"Format workflow relationship data for rendering","type":"n8n-nodes-base.code","typeVersion":2,"position":[2600,-280]},{"parameters":{"respondWith":"text","responseBody":"=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>n8n Subworkflow Dependency Graph with Mermaid</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <script src=\"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\"></script>\n    <style>\n      .mermaid-container {\n        margin-top: 20px;\n        width: 100%;\n        height: 100vh;\n      }\n    </style>\n</head>\n<body>\n    <div class=\"container mt-4\">\n        <h2>n8n Subworkflow Dependency Graph with Mermaid</h2>\n        <div id=\"workflows-container\"></div>\n    </div>\n    <hr class=\"featurette-divider border-dark\" />\n\n    <script>\n        // JSON object containing mermaidChart data\n        const workflowsData = [\n            {\n                mermaidChart: `{{ $json.mermaidChart }}`\n            }\n        ];\n\n        document.addEventListener('DOMContentLoaded', () => {\n            const workflowsContainer = document.getElementById('workflows-container');\n\n            // Render workflow immediately\n            renderWorkflows(workflowsData);\n\n            function renderWorkflows(workflows) {\n                workflows.forEach((workflow) => {\n                    const mermaidContainer = document.createElement('div');\n                    mermaidContainer.className = 'mermaid-container';\n                    mermaidContainer.innerHTML = workflow.mermaidChart;\n                    workflowsContainer.appendChild(mermaidContainer);\n                    mermaid.init(undefined, mermaidContainer); // Initialize mermaid to render the graph\n                });\n            }\n        });\n\n        // Initialize mermaid with the config\n        mermaid.initialize({ startOnLoad: false });\n    </script>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>\n","options":{}},"id":"3fffc7d0-1319-4fab-8549-24d409b19ffd","name":"Visualize dependency graph with MermaidJS","type":"n8n-nodes-base.respondToWebhook","position":[3000,-280],"typeVersion":1.1},{"parameters":{"content":"## About this workflow\nThis workflow analyzes an n8n instance to detect dependencies between workflows. It identifies which workflows call others ([sub-workflows](https://docs.n8n.io/flow-logic/subworkflows/)), builds a dependency graph, and automatically tags subworkflows with their calling workflows. This makes it easier to track dependencies, optimize workflow structures, and maintain documentation in complex n8n environments.","height":140.62930090784633,"width":653.2415806326139,"color":5},"id":"2aa3a9e1-bccb-4aa9-825a-7e16c28db41c","name":"Sticky Note11","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[680,-320]},{"parameters":{"content":"## About the maker\n**[Find Ludwig Gerdes on LinkedIn](https://www.linkedin.com/in/ludwiggerdes)**","height":95.5709893724457,"width":266.5295926113459,"color":4},"id":"833784d9-fcbf-4961-a8c9-0bafbe61ebe7","name":"Sticky Note12","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[1360,-320]},{"parameters":{"path":"0ba23dba-1847-46a8-98fa-877f883e97e7","responseMode":"responseNode","options":{}},"id":"25141489-3c67-42ae-8328-9b7a7560f9ac","name":"When viewed in a browser","type":"n8n-nodes-base.webhook","typeVersion":2,"position":[760,-160],"webhookId":"0ba23dba-1847-46a8-98fa-877f883e97e7"}],"connections":{"Update workflow tags":{"main":[[{"node":"Return dependency graph data","type":"main","index":0}]]},"GET all workflows":{"main":[[{"node":"List callers of subworkflows","type":"main","index":0}]]},"List callers of subworkflows":{"main":[[{"node":"Exclude uncalled workflows","type":"main","index":0}]]},"Exclude uncalled workflows":{"main":[[{"node":"GET workflow(s)","type":"main","index":0}]]},"Exclude missing workflows":{"main":[[{"node":"Count callers and identify new callers","type":"main","index":0}]]},"And every Sunday":{"main":[[{"node":"GET all workflows","type":"main","index":0}]]},"When this workflow is activated":{"main":[[{"node":"GET all workflows","type":"main","index":0}]]},"GET workflow(s)":{"main":[[{"node":"Exclude missing workflows","type":"main","index":0}]]},"Loop through workflows":{"main":[[{"node":"Combine dependency graph values into labels","type":"main","index":0},{"node":"Format workflow relationship data for rendering","type":"main","index":0}],[{"node":"SET instance_url","type":"main","index":0}]]},"GET all tags":{"main":[[{"node":"Remove existing tags from new_callers list","type":"main","index":0}]]},"Remove existing tags from new_callers list":{"main":[[{"node":"If any new callers","type":"main","index":0}]]},"If any new callers":{"main":[[{"node":"Split out new callers as new tags","type":"main","index":0}],[{"node":"Merge","type":"main","index":1}]]},"Split out new callers as new tags":{"main":[[{"node":"Create new tags","type":"main","index":0}]]},"Create new tags":{"main":[[{"node":"Return original pass through values","type":"main","index":0}]]},"Return original pass through values":{"main":[[{"node":"Merge","type":"main","index":0}]]},"Merge":{"main":[[{"node":"GET all tags again","type":"main","index":0}]]},"GET all tags again":{"main":[[{"node":"Create tag id:name dictionary","type":"main","index":0}]]},"Create tag id:name dictionary":{"main":[[{"node":"Retrieve tag ids and names from dictionary","type":"main","index":0}]]},"Retrieve tag ids and names from dictionary":{"main":[[{"node":"Update workflow tags","type":"main","index":0}]]},"Return dependency graph data":{"main":[[{"node":"Loop through workflows","type":"main","index":0}]]},"Count callers and identify new callers":{"main":[[{"node":"Loop through workflows","type":"main","index":0}]]},"Combine dependency graph values into labels":{"main":[[{"node":"Visualize subworkflow dependency graph","type":"main","index":0}]]},"SET instance_url":{"main":[[{"node":"GET all tags","type":"main","index":0}]]},"Format workflow relationship data for rendering":{"main":[[{"node":"Visualize dependency graph with MermaidJS","type":"main","index":0}]]},"When viewed in a browser":{"main":[[{"node":"GET all workflows","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":{"node:And every Sunday":{"recurrenceRules":[]}},"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"592db97a-3462-4682-aba9-e59a4aac804c","triggerCount":3,"tags":[]}